// Generated by CoffeeScript 1.10.0
var configure,
  hasProp = {}.hasOwnProperty,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  slice = [].slice;

configure = function($) {
  var Base, Client, Request, Response, Server, SocketRPC;
  if ($ == null) {
    $ = {};
  }
  if ($.generateId == null) {
    $.generateId = function() {
      return require("uuid").v4();
    };
  }
  if ($.requestEventName == null) {
    $.requestEventName = "rpc.request";
  }
  Request = (function() {
    Request.prototype.id = null;

    Request.prototype.method = null;

    Request.prototype.params = null;

    Request.prototype.generateId = $.generateId;

    function Request(props) {
      var key, val;
      for (key in props) {
        if (!hasProp.call(props, key)) continue;
        val = props[key];
        if (this[key] !== void 0) {
          this[key] = val;
        }
      }
      if (this.generateId != null) {
        if (this.id == null) {
          this.id = this.generateId();
        }
      }
    }

    return Request;

  })();
  Response = (function() {
    Response.prototype.id = null;

    Response.prototype.result = void 0;

    Response.prototype.error = void 0;

    function Response(props) {
      var key, val;
      for (key in props) {
        if (!hasProp.call(props, key)) continue;
        val = props[key];
        this[key] = val;
      }
    }

    return Response;

  })();
  Base = (function() {
    Base.Request = Request;

    Base.Response = Response;

    Base.prototype.requestEventName = null;

    Base.prototype.responseEventName = null;

    Base.prototype.socket = null;

    Base.prototype.socketListeners = null;

    function Base(props) {
      var key, val;
      for (key in props) {
        if (!hasProp.call(props, key)) continue;
        val = props[key];
        this[key] = val;
      }
      if (this.requestEventName == null) {
        this.requestEventName = $.requestEventName;
      }
      if (this.responseEventName == null) {
        this.responseEventName = $.responseEventName;
      }
      if (this.socketListeners == null) {
        this.socketListeners = {};
      }
    }

    Base.prototype.attachSocket = function(socket) {
      if (this.socket != null) {
        this.disconnect();
      }
      this.socket = socket;
      return this.addSocketListeners();
    };

    Base.prototype.detachSocket = function() {
      if (this.socket == null) {
        return;
      }
      this.removeSocketListeners();
      return this.socket = null;
    };

    Base.prototype.addSocketListener = function(eventName, listener) {
      this.socketListeners[eventName] = listener;
      return this.socket.on(eventName, listener);
    };

    Base.prototype.addSocketListeners = function() {};

    Base.prototype.removeSocketListener = function(eventName) {
      return this.socket.removeListener(eventName, this.socketListeners[eventName]);
    };

    Base.prototype.removeSocketListeners = function() {
      var eventName, ref, results;
      ref = this.socketListeners;
      results = [];
      for (eventName in ref) {
        if (!hasProp.call(ref, eventName)) continue;
        results.push(this.removeSocketListener(eventName));
      }
      return results;
    };

    Base.prototype.constructRequest = function(props) {
      return new this.constructor.Request(props);
    };

    Base.prototype.constructResponse = function(props) {
      return new this.constructor.Response(props);
    };

    return Base;

  })();
  Server = (function(superClass) {
    extend(Server, superClass);

    Server.prototype.methods = null;

    function Server(props) {
      Server.__super__.constructor.call(this, props);
      if (this.methods == null) {
        this.methods = {};
      }
    }

    Server.prototype.registerMethod = function(key, fn) {
      return this.methods[key] = fn;
    };

    Server.prototype.addSocketListeners = function() {
      return this.addSocketListener(this.requestEventName, this.handleRequest.bind(this));
    };

    Server.prototype.handleRequest = function(props) {
      var method, request;
      request = this.constructRequest(props);
      method = this.methods[request.method];
      return method.call.apply(method, [null].concat(slice.call(props.params), [(function(_this) {
        return function(error, result) {
          return _this.sendResponse({
            id: request.id,
            error: error,
            result: result
          });
        };
      })(this)]));
    };

    Server.prototype.sendResponse = function(props) {
      var response;
      response = this.constructResponse(props);
      return this.socket.emit(this.responseEventName, response);
    };

    return Server;

  })(Base);
  Client = (function(superClass) {
    extend(Client, superClass);

    Client.prototype.responseHandlers = null;

    function Client(props) {
      Client.__super__.constructor.call(this, props);
      if (this.responseHandlers == null) {
        this.responseHandlers = {};
      }
    }

    Client.prototype.addSocketListeners = function() {
      return this.addSocketListener(this.responseEventName, this.handleResponse.bind(this));
    };

    Client.prototype.sendRequest = function(props, responseHandler) {
      var request;
      request = this.constructRequest(props);
      this.responseHandlers[request.id] = responseHandler;
      return this.socket.emit(this.requestEventName, request);
    };

    Client.prototype.handleResponse = function(props) {
      var response, responseHandler;
      response = this.constructResponse(props);
      responseHandler = this.responseHandlers[response.id];
      if (responseHandler != null) {
        return responseHandler.call(null, response.error, response.result);
      }
    };

    return Client;

  })(Base);
  return SocketRPC = {
    configuration: $,
    configure: configure,
    Request: Request,
    Response: Response,
    Base: Base,
    Server: Server,
    Client: Client
  };
};

module.exports = configure();

//# sourceMappingURL=index.js.map
